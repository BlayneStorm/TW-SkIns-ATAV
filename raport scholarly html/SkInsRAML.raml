#%RAML 1.0
---
title: Skill Instructor
baseUri: http://localhost:8050
/signin:
  post:
    description: Login to SkIns
    body:
      application/json:
         example: |
           {
             "email": "mititelu.alex@gmail.com",
             "password": "mititelualex1"
           }	
    responses:
        302:
          body:
            text/html:
              example: |
        404:
          body:
            application/json:

/register:
  post:
    description: Register
    body:
      application/json:
         example: |
           {
             "username": "miti",
             "password": "steaua",
             "email": "mititelu.alex@gmail.com",
             "firstname": "Alexandru",
             "lastname": "Mititelu",
             "phone": "0232112112",
             "gender": "female",
             "interests": "weightlifting"
           }	
    responses:
        404:
          body:
            text/html:
              example: |
                "Microserviciul register a picat"
        200:
          body:
            text/html:
              example: |
                "createdAccount page"
/getAllCourses:
  get:
    description: Fetches all available courses
    responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                  "_id":"5b16b94065136feeb6a37b22",
                  "path":"/path/to/course",
                  "titlu_curs":"TITLE",
                  "tag":"python",
                  "descriere":"Descriere"
                  },
                  {
                    "_id":"5b186ce2b46d674fa355e797",
                    "path":"/src/guitar",
                    "titlu_curs":"Chitara",
                    "tag":"gtr",
                    "descriere":"Am descris ceva"
                  }
                ]

        404:
          body:
            text/html:
              example: |
                "Couldn't find specified path"
/subscribe:
  post:
    description: Subscribes to a course (adds to the users' library)
    responses:
        200:
          body:
            text/html:
              example: |
                "Succesfully inserted!"
        404:
          body:
            text/html:
              example: |
                "Couldn't find specified path"
/getSubscribedCourses:
  get:
    description: Fetches all the courses the user is subscribed to.
    responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                  "_id":"5b16b94065136feeb6a37b22",
                  "path":"/path/to/course",
                  "titlu_curs":"TITLE",
                  "tag":"python",
                  "descriere":"Descriere"
                  }
                ]

        404:
          body:
            text/html:
              example: |
                "Couldn't find specified path"
/python:
  description: Calls the python course microservice.
  /documentation:
    get:
     description: Fetches the documentation
     responses:
      200:
        body:
          application/json:
  /getExercise:
    get:
     description: Gets a single exercise.
     responses:
      200:
        body:
          application/json:
            example: |
              { 
                "_id" : ObjectId("5b1e689ddf04711392dfdbe0"), 
                "nrExercitiu" : 4.0, 
                "enunt" : "List Remove Duplicates\n    \tWrite a program (function!) that takes a list and returns a new list that contains all the elements of the first list minus all the duplicates.\n\nExtras:\n\nWrite two different functions to do this - one using a loop and constructing a list, and another using sets.\nDiscussion\n\nConcepts for this week:\n\nSets\nSets\n\nIn mathematics, a set is a collection of elements where no element is repeated. This becomes useful because if you know your data is stored in a set, you are guaranteed to have unique elements.\n\nFeatures of sets\n\nSets are not ordered. This means that there is no “first element” or “last element.” There are just “elements”. You cannot ask a set for it’s “next element”.\nThere are no repeat elements in sets.\nYou can convert between sets and lists very easily.\nIn Python\n\nIn Python, you make and use a set with the set() keyword. For example:\n\n  names = set()\n  names.add('Michele')\n  names.add('Robin')\n  names.add('Michele')\n  print(names)\nAnd the output will be;\n\n  set(['Michele', 'Robin'])\nYou can do to a set almost anything you can do to a list (except ask for things like “the third element”). See the Python documentation about sets to get a full list of things you can do to sets.\n\nYou can convert from a list to a set and a set to a list pretty easily:\n\n  names = ['Michele', 'Robin', 'Sara', 'Michele']\n  names = set(names)\n  names = list(names)\n  print(names)\nAnd the result of this will be:\n\n  ['Michele', 'Robin', 'Sara']\nHappy coding!\n    ", 
                "input" : "[1, 2, 3, 4, 3, 2, 1, 10, 4, 5, 2, 10, 1, 8]", 
                "rezultat" : "[1, 2, 3, 4, 5, 8, 10]"
              }
  /getExercises:
    get:
     description: Returns an array of exercises. Makes use of the getExercise path.
     responses:
      200:
        body:
          application/json:

  /fileUpload:
    post:
     description: Uploads file to the server. It will be interpreted and compared to the correct output.
     responses:
      200:
        body:
          application/json:
            example: |
            {
              "status": scriptStatus,
              "input": value,
              "expectedOutput": theCorrectAnswer,
              "uploadedScriptOutput": theAnswerForTheUploadedScript,
              "message": message
            }
/guitar:
  description: Calls the guitar course microservice.
  get:
    description: A page with a guitar tabulature chooser.
    responses:
      200:
        body:
          text/html:
      404:
        body:
          text/html:
/getFields:
  get:
    description: 
    responses:
        200:
          body:
            application/json:
              example: |
                {
                  "username": "miti",
                  "password": "...",
                  "email": "mititelu.alex@gmail.com",
                  "firstname": "Alexandru",
                  "lastname": "Mititelu",
                  "phone": "0232112112",
                  "gender": "female",
                  "interests": "weightlifting"
                }

        404:
          body:
            text/html:
              example: |
/getLang:
  get:
    description: Calls the language microservice.
    responses:
        200:
          body:
            application/json:
              example: |
                

        404:
          body:
            text/html:
              example: |
/courses:
  get:
    description: Fetches the courses page and loads the data dynamically, using getAllCourses.
    responses:
        200:
          body:
            text/html:
/myLibrary:
  get:
    description: Fetches the library page and loads the data dinamically, using getSubscribedCourses.
    responses:
        200:
          body:
            text/html:





